{"version":3,"sources":["services/MovieProvider.js","components/MovieCardComponent.jsx","components/PopularMoviesComponent.jsx","components/MovieComponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["API_KEY","AVAILABLE_API_METHODS","MovieProvider","requestSettings","method","baseURL","url","params","api_key","axios","movieId","Promise","reject","MovieCardComponent","this","props","movie","className","to","id","original_title","style","display","release_date","overflow","overview","length","substring","React","Component","PopularMoviesComponent","state","movieProvider","getMovies","getPopularMovies","then","response","results","data","movieComponents","i","movieComponent","push","setState","movies","movieCardComponents","catch","error","console","log","map","x","key","MovieComponent","match","getMovieDetails","popularity","App","exact","path","component","exaxt","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8d0135a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/**\r\n * API key for passing auth\r\n */\r\nexport const API_KEY = 'e536773c3f8e265472e550a4a1c8fe41';\r\n\r\n/**\r\n * MovieDb API string\r\n */\r\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\n/**\r\n * Object with available API methods in fkng-frnt app to sending to MovieDb API\r\n */\r\nexport const AVAILABLE_API_METHODS = {\r\n    getPopular: '/movie/popular',\r\n    getDetails: '/movie'\r\n};\r\n\r\n/**\r\n * Movie provider for getting data for using it in app\r\n */\r\nexport class MovieProvider {\r\n    /**\r\n     * Method for getting popular movies\r\n     */\r\n    getPopularMovies() {\r\n        const requestSettings = {\r\n            method: 'GET',\r\n            baseURL: API_BASE_URL,\r\n            url: AVAILABLE_API_METHODS.getPopular,\r\n            params: {\r\n                api_key: API_KEY\r\n            }\r\n        };\r\n\r\n        return axios(requestSettings);\r\n    }\r\n\r\n    /**\r\n     * Method for getting movie details\r\n     * @param movieId requesting movie id\r\n     */\r\n    getMovieDetails(movieId) {\r\n        if (!movieId) {\r\n            return Promise.reject();\r\n        }\r\n\r\n        const requestSettings = {\r\n            method: 'GET',\r\n            baseURL: API_BASE_URL,\r\n            url: AVAILABLE_API_METHODS.getDetails + `/${movieId}`,\r\n            params: {\r\n                api_key: API_KEY\r\n            }\r\n        };\r\n\r\n        return axios(requestSettings);\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class MovieCardComponent extends React.Component {\r\n    render() {\r\n        const { movie = {} } = this.props;\r\n\r\n        return <div className='item poster card'>\r\n            <div className='image_content'>\r\n                <Link to={`/movie/${movie.id}`}>Here will be poster</Link>\r\n            </div>\r\n            <div className='info'>\r\n                <div className='wrapper'>\r\n                    <div className='consensus tight'>\r\n                        <div className='outer_ring'>\r\n                            <div className='user_score_chart'>\r\n                                <div className='percent'>\r\n                                    <span className='icon'>\r\n                                        Here will be icon\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='flex'>\r\n                        <Link className='title result' to={`/movie/${movie.id}`}>{movie.original_title}</Link>\r\n                        <span style={{ display: 'block' }}>{movie.release_date}</span>\r\n                    </div>\r\n                </div>\r\n                <p className='overview' style={{ overflow: 'hidden' }}>\r\n                    {movie.overview && movie.overview.length > 200 ? movie.overview.substring(0, 200) + '...' : movie.overview}\r\n                </p>\r\n                <p className='view_more'>\r\n                    <Link className='result' to={`/movie/${movie.id}`}>{'More info'}</Link>\r\n                </p>\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React from 'react';\r\nimport { MovieProvider } from '../services/MovieProvider';\r\nimport { MovieCardComponent } from './MovieCardComponent';\r\n\r\n\r\nexport class PopularMoviesComponent extends React.Component {\r\n    movieProvider;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.movieProvider = new MovieProvider();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n\r\n    getMovies() {\r\n        this.movieProvider.getPopularMovies()\r\n            .then(response => {\r\n                const { results } = response.data;\r\n                const movieComponents = [];\r\n\r\n                for (let i = 0; i < results.length; i++) {\r\n                    const movieComponent = new MovieCardComponent({ movie: results[i] });\r\n                    movieComponents.push(movieComponent);\r\n                }\r\n\r\n                this.setState({ movies: results, movieCardComponents: movieComponents });\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.movies\r\n            || !this.state.movieCardComponents\r\n            || !this.state.movieCardComponents.length) {\r\n            return <div>Loading...</div>;\r\n        }\r\n\r\n        return <div>\r\n            {this.state.movieCardComponents\r\n                && this.state.movieCardComponents.map((x, i) => this.state.movies\r\n                    && <div key={i}><MovieCardComponent movie={this.state.movies[i]} /></div>)}\r\n        </div>;\r\n    }\r\n}","import React from 'react';\r\nimport { MovieProvider } from '../services/MovieProvider';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class MovieComponent extends React.Component {\r\n    movieProvider;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.movieProvider = new MovieProvider();\r\n    }\r\n\r\n    getMovieDetails() {\r\n        this.props.match.params.movieId\r\n            && this.movieProvider.getMovieDetails(this.props.match.params.movieId)\r\n                .then(response => { this.setState({ movie: response.data }); })\r\n                .catch(error => console.log(error));\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.movie) {\r\n            this.getMovieDetails();\r\n        }\r\n\r\n        const { movie = {} } = this.state;\r\n\r\n        return <div className='custom_bg'>\r\n            <div className='single_column'>\r\n                <div className='poster'>\r\n                    <div className='image_content'>\r\n                        Here will be image\r\n                        </div>\r\n                    <div>\r\n                        {movie.original_title}\r\n                    </div>\r\n                    <div>\r\n                        Popularity: {movie.popularity}\r\n                    </div>\r\n                </div>\r\n                <div className='header_poster_wrapper'>\r\n                    <div className='header_info'>\r\n                        <h3>Overview</h3>\r\n                        <div className='overview'>\r\n                            <p>{movie.overview}</p>\r\n                            <p>Release data: {movie.release_date}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Link to='/'>Back to popular movies</Link>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { PopularMoviesComponent } from './components/PopularMoviesComponent';\nimport { MovieComponent } from './components/MovieComponent';\nimport { Route } from 'react-router';\n\nfunction App() {\n  return <div className=\"App\">\n    <Route exact path='/' component={PopularMoviesComponent} />\n    <Route exaxt path='/movie/:movieId' component={MovieComponent} />\n  </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter>\n    <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}